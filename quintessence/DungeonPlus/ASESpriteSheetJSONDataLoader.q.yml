properties:


  - name: sprite_sheet
    type: SpriteSheet*
    init_with: nullptr
    constructor_arg: true


functions:


  - name: load
    type: std::map<std::string, DungeonPlus::Animation>
    body: |
      using DungeonPlus::Errors;
      std::string filename = "./bin/data/bitmaps/sprites_grid-x.json";
      nlohmann::json parsed_json = nlohmann::json::parse(AllegroFlare::php::file_get_contents(filename));
      std::map<std::string, DungeonPlus::Animation> result;

      // validate expected sections

      if (!parsed_json.contains("frames"))
      {
         Errors::throw_error("DungeonPlus/AsepriteSpriteSheetJSONDataLoader", "missing \"frames\" element in json");
      }
      if (!parsed_json.contains("meta"))
      {
         Errors::throw_error("DungeonPlus/AsepriteSpriteSheetJSONDataLoader", "missing \"meta\" element in json");
      }
      if (!parsed_json["meta"].contains("frameTags"))
      {
         Errors::throw_error(
            "DungeonPlus/AsepriteSpriteSheetJSONDataLoader",
            "missing [\"meta\"][\"tags\"] element in json"
         );
      }

      // load frame data

      std::map<int, int> frame_data;
      nlohmann::json frames = parsed_json["frames"];
      int index = 0;
      for (auto &frame : frames)
      {
         // TODO: validate frame name
         int frame_num = index;
         int duration_msec;
         frame.at("duration").get_to(duration_msec);

         frame_data[frame_num] = duration_msec;
         index++;
      }

      nlohmann::json tags = parsed_json["meta"]["frameTags"];
      //std::map<std::string, DungeonPlus::Animation> animations_dictionary;

      for (auto &tag : tags)
      {
         std::string tag_name;
         std::string mode;
         int start_frame, end_frame;

         tag.at("name").get_to(tag_name);
         tag.at("from").get_to(start_frame);
         tag.at("to").get_to(end_frame);
         tag.at("direction").get_to(mode);

         if (result.count(tag_name) > 0)
         {
            Errors::throw_error("DungeonPlus/AsepriteSpriteSheetJSONDataLoader", "duplicate key (a.k.a. tag) for %s");
         }

         result[tag_name] = DungeonPlus::Animation(
            sprite_sheet,
            tag_name,
            _build_animation_frames_for(start_frame, end_frame, frame_data), // <- NOTE: this copy arg can be optimized
            _get_playmode_from_direction(mode)
         );
      }

      return result;
    body_dependency_symbols:
      - DungeonPlus::AnimationFrame
      - DungeonPlus::Animation
      - DungeonPlus::Errors
      - AllegroFlare::UsefulPHP
      - nlohmann::json


  - name: _build_animation_frames_for
    type: std::vector<DungeonPlus::AnimationFrame>
    parameters:
      - name: start_frame
        type: uint32_t
        default_argument: 0
      - name: end_frame
        type: uint32_t
        default_argument: 0
      - name: frame_data
        type: std::map<int, int>
        default_argument: '{}'
    guards: [ end_frame >= start_frame ]
    body: |
      std::vector<AnimationFrame> result;
      for (uint32_t frame=start_frame; frame<=end_frame; frame++)
      {
         if (frame_data.count(frame) == 0)
         {
            // This frame does not exist
            Errors::throw_error("DungeonPlus::AsepriteSpriteSheetJSONDataLoader::_build_animation_frames_for",
                                "a frame does not exist for this num");
         }
         int duration_msec = frame_data[frame];
         result.push_back(AnimationFrame(frame, duration_msec));
      }
      return result;


  - name: _get_playmode_from_direction
    type: uint32_t
    parameters:
      - name: direction
        type: std::string
        default_argument: '"[unset-direction]"'
    body: |
       std::map<std::string, uint32_t> playmode_map = {
          { "pingpong", DungeonPlus::Animation::PLAYMODE_FORWARD_PING_PONG },
          { "forward",  DungeonPlus::Animation::PLAYMODE_FORWARD_LOOP },
       };

       if (playmode_map.count(direction) == 0)
       {
            // This playmode does not exist
            Errors::throw_error("DungeonPlus::AsepriteSpriteSheetJSONDataLoader::_get_playmode_from_direction",
                                "a playmode does not exist for this direction.");
       }

       return playmode_map[direction];


dependencies:


  - symbol: AllegroFlare::UsefulPHP
    headers: [ AllegroFlare/UsefulPHP.hpp ]
  - symbol: nlohmann::json
    headers: [ lib/nlohmann/json.hpp ]
  - symbol: DungeonPlus::Errors
    headers: [ DungeonPlus/Errors.hpp ]
  - symbol: DungeonPlus::Animation
    headers: [ DungeonPlus/Animation.hpp ]
  - symbol: DungeonPlus::AnimationFrame
    headers: [ DungeonPlus/AnimationFrame.hpp ]
  - symbol: SpriteSheet
    headers: [ dungeon/models/sprite_sheet.hpp ]


