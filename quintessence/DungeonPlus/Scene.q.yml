properties:


  - name: root
    type: AllegroFlare::ElementID
    init_with: ''
    getter_ref: true

  - name: camera
    type: AllegroFlare::Camera2D
    init_with: ''


functions:


  - name: update
    body: |
      std::vector<DungeonPlus::Sprite*> flat_list_of_entities
         = root.get_flat_list_of_descendants<DungeonPlus::Sprite>();

      camera.size = { 1920, 1080 };
      camera.align = { 0.5, 0.5 };
      camera.position = { 1920/2, 1080/2 };

      for (auto &entity : flat_list_of_entities)
      {
         entity->update();
      }

      return;


  - name: draw
    body: |
      std::vector<DungeonPlus::Sprite*> entities_y_sorted = get_all_entities_y_sorted();

      //camera.setup_dimentional_projection(al_get_backbuffer(al_get_current_display()));
      camera.start_transform();
      for (auto &entity : entities_y_sorted)
      {
         entity->draw();
      }
      camera.restore_transform();
      
      return;


  - name: get_all_entities_y_sorted
    type: std::vector<DungeonPlus::Sprite *>
    body: |
      std::vector<DungeonPlus::Sprite*> flat_list = root.get_flat_list_of_descendants<DungeonPlus::Sprite>();

      // NOTE: The args in this lamba to be const
      std::sort(flat_list.begin(), flat_list.end(),[](DungeonPlus::Sprite *a, DungeonPlus::Sprite *b)
            { return a->get_place_ref().position.y < b->get_place_ref().position.y; }
         );
      return flat_list;
    


dependencies:


  - symbol: AllegroFlare::ElementID
    headers: [ AllegroFlare/ElementID.hpp ]
  - symbol: DungeonPlus::Sprite
    headers: [ DungeonPlus/Sprite.hpp ]
  - symbol: AllegroFlare::Camera2D
    headers: [ AllegroFlare/Camera2D.hpp ]


